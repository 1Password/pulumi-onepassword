# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ItemPasswordRecipe',
    'ItemSection',
    'ItemSectionField',
    'ItemSectionFieldPasswordRecipe',
    'GetItemFileResult',
    'GetItemSectionResult',
    'GetItemSectionFieldResult',
    'GetItemSectionFileResult',
]

@pulumi.output_type
class ItemPasswordRecipe(dict):
    def __init__(__self__, *,
                 digits: Optional[bool] = None,
                 length: Optional[int] = None,
                 letters: Optional[bool] = None,
                 symbols: Optional[bool] = None):
        """
        :param bool digits: Use digits [0-9] when generating the password.
        :param int length: The length of the password to be generated.
        :param bool letters: Use letters [a-zA-Z] when generating the password.
        :param bool symbols: Use symbols [!@.-_*] when generating the password.
        """
        if digits is not None:
            pulumi.set(__self__, "digits", digits)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if letters is not None:
            pulumi.set(__self__, "letters", letters)
        if symbols is not None:
            pulumi.set(__self__, "symbols", symbols)

    @property
    @pulumi.getter
    def digits(self) -> Optional[bool]:
        """
        Use digits [0-9] when generating the password.
        """
        return pulumi.get(self, "digits")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        The length of the password to be generated.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def letters(self) -> Optional[bool]:
        """
        Use letters [a-zA-Z] when generating the password.
        """
        return pulumi.get(self, "letters")

    @property
    @pulumi.getter
    def symbols(self) -> Optional[bool]:
        """
        Use symbols [!@.-_*] when generating the password.
        """
        return pulumi.get(self, "symbols")


@pulumi.output_type
class ItemSection(dict):
    def __init__(__self__, *,
                 label: str,
                 fields: Optional[Sequence['outputs.ItemSectionField']] = None,
                 id: Optional[str] = None):
        """
        :param str label: The label for the section.
        :param Sequence['ItemSectionFieldArgs'] fields: A list of custom fields in the section.
        :param str id: A unique identifier for the section.
        """
        pulumi.set(__self__, "label", label)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the section.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.ItemSectionField']]:
        """
        A list of custom fields in the section.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        A unique identifier for the section.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ItemSectionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRecipe":
            suggest = "password_recipe"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ItemSectionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ItemSectionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ItemSectionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: str,
                 id: Optional[str] = None,
                 password_recipe: Optional['outputs.ItemSectionFieldPasswordRecipe'] = None,
                 purpose: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str label: The label for the field.
        :param str id: A unique identifier for the field.
        :param 'ItemSectionFieldPasswordRecipeArgs' password_recipe: The recipe used to generate a new value for a password.
        :param str purpose: Purpose indicates this is a special field: a username, password, or notes field. One of ["USERNAME" "PASSWORD" "NOTES"]
        :param str type: The type of value stored in the field. One of ["STRING" "CONCEALED" "EMAIL" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        :param str value: The value of the field.
        """
        pulumi.set(__self__, "label", label)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if password_recipe is not None:
            pulumi.set(__self__, "password_recipe", password_recipe)
        if purpose is not None:
            pulumi.set(__self__, "purpose", purpose)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the field.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        A unique identifier for the field.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="passwordRecipe")
    def password_recipe(self) -> Optional['outputs.ItemSectionFieldPasswordRecipe']:
        """
        The recipe used to generate a new value for a password.
        """
        return pulumi.get(self, "password_recipe")

    @property
    @pulumi.getter
    def purpose(self) -> Optional[str]:
        """
        Purpose indicates this is a special field: a username, password, or notes field. One of ["USERNAME" "PASSWORD" "NOTES"]
        """
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of value stored in the field. One of ["STRING" "CONCEALED" "EMAIL" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the field.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ItemSectionFieldPasswordRecipe(dict):
    def __init__(__self__, *,
                 digits: Optional[bool] = None,
                 length: Optional[int] = None,
                 letters: Optional[bool] = None,
                 symbols: Optional[bool] = None):
        """
        :param bool digits: Use digits [0-9] when generating the password.
        :param int length: The length of the password to be generated.
        :param bool letters: Use letters [a-zA-Z] when generating the password.
        :param bool symbols: Use symbols [!@.-_*] when generating the password.
        """
        if digits is not None:
            pulumi.set(__self__, "digits", digits)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if letters is not None:
            pulumi.set(__self__, "letters", letters)
        if symbols is not None:
            pulumi.set(__self__, "symbols", symbols)

    @property
    @pulumi.getter
    def digits(self) -> Optional[bool]:
        """
        Use digits [0-9] when generating the password.
        """
        return pulumi.get(self, "digits")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        The length of the password to be generated.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def letters(self) -> Optional[bool]:
        """
        Use letters [a-zA-Z] when generating the password.
        """
        return pulumi.get(self, "letters")

    @property
    @pulumi.getter
    def symbols(self) -> Optional[bool]:
        """
        Use symbols [!@.-_*] when generating the password.
        """
        return pulumi.get(self, "symbols")


@pulumi.output_type
class GetItemFileResult(dict):
    def __init__(__self__, *,
                 content: str,
                 content_base64: str,
                 id: str,
                 name: str):
        """
        :param str content: The content of the file.
        :param str content_base64: The content of the file in base64 encoding. (Use this for binary files.)
        :param str id: The UUID of the file.
        :param str name: The name of the file.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_base64", content_base64)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of the file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentBase64")
    def content_base64(self) -> str:
        """
        The content of the file in base64 encoding. (Use this for binary files.)
        """
        return pulumi.get(self, "content_base64")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The UUID of the file.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the file.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetItemSectionResult(dict):
    def __init__(__self__, *,
                 id: str,
                 label: str,
                 fields: Optional[Sequence['outputs.GetItemSectionFieldResult']] = None,
                 files: Optional[Sequence['outputs.GetItemSectionFileResult']] = None):
        """
        :param str id: A unique identifier for the section.
        :param str label: The label for the section.
        :param Sequence['GetItemSectionFileArgs'] files: A list of files attached to the section.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if files is not None:
            pulumi.set(__self__, "files", files)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A unique identifier for the section.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the section.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.GetItemSectionFieldResult']]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.GetItemSectionFileResult']]:
        """
        A list of files attached to the section.
        """
        return pulumi.get(self, "files")


@pulumi.output_type
class GetItemSectionFieldResult(dict):
    def __init__(__self__, *,
                 id: str,
                 label: str,
                 purpose: str,
                 type: str,
                 value: str):
        """
        :param str id: A unique identifier for the field.
        :param str label: The label for the field.
        :param str purpose: Purpose indicates this is a special field: a username, password, or notes field. One of ["USERNAME" "PASSWORD" "NOTES"]
        :param str type: The type of value stored in the field. One of ["STRING" "CONCEALED" "EMAIL" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        :param str value: The value of the field.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "purpose", purpose)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A unique identifier for the field.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the field.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def purpose(self) -> str:
        """
        Purpose indicates this is a special field: a username, password, or notes field. One of ["USERNAME" "PASSWORD" "NOTES"]
        """
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of value stored in the field. One of ["STRING" "CONCEALED" "EMAIL" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the field.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetItemSectionFileResult(dict):
    def __init__(__self__, *,
                 content: str,
                 content_base64: str,
                 id: str,
                 name: str):
        """
        :param str content: The content of the file.
        :param str content_base64: The content of the file in base64 encoding. (Use this for binary files.)
        :param str id: The UUID of the file.
        :param str name: The name of the file.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_base64", content_base64)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of the file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentBase64")
    def content_base64(self) -> str:
        """
        The content of the file in base64 encoding. (Use this for binary files.)
        """
        return pulumi.get(self, "content_base64")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The UUID of the file.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the file.
        """
        return pulumi.get(self, "name")


